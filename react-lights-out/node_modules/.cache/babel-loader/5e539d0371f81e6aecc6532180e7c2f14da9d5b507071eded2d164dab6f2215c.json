{"ast":null,"code":"var _jsxFileName = \"/Users/hannahcourtney/Desktop/CODING PROJECTS/React Exercises/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows = 5,\n  ncols = 5,\n  chanceLightStartsOn = 0.5\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    return new Array(nrows).fill().map(r => new Array(ncols).fill().map(c => Math.random() < chanceLightStartsOn));\n  }\n  console.log('testing for array of arrays true/false');\n  console.log(createBoard());\n  console.log(board);\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Board\",\n        children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [rowIndex, colIndex]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this);\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","Array","fill","map","r","c","Math","random","console","log","hasWon","flipCellsAround","coord","oldBoard","y","x","split","Number","flipCell","boardCopy","className","children","row","rowIndex","cell","colIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hannahcourtney/Desktop/CODING PROJECTS/React Exercises/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows=5, ncols=5, chanceLightStartsOn=0.5 }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    return (\n      new Array(nrows)\n      .fill()\n      .map(r => new Array(ncols)\n      .fill()\n      .map(c => Math.random() < chanceLightStartsOn)\n      )\n    )  \n  }\n  console.log('testing for array of arrays true/false')\n  console.log(createBoard())\n  console.log(board)\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n\n      return (\n        <div className=\"Board\">\n          {board.map((row, rowIndex) =>\n            <div className=\"row\" key={rowIndex}>\n              {row.map((cell, colIndex) => (\n                <div>{rowIndex}{colIndex}</div>\n              ))}\n              </div>\n            )}\n        </div>\n      )\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n}\n\nexport default Board;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,aAAa;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA,SAAAC,MAAA,IAAAC,OAAA;AAyBA,SAASC,KAAKA,CAAC;EAAEC,KAAK,GAAC,CAAC;EAAEC,KAAK,GAAC,CAAC;EAAEC,mBAAmB,GAAC;AAAI,CAAC,EAAE;EAAAC,EAAA;EAC5D,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAACW,WAAW,CAAC,CAAC,CAAC;;EAEjD;EACA,SAASA,WAAWA,CAAA,EAAG;IACrB,OACE,IAAIC,KAAK,CAACP,KAAK,CAAC,CACfQ,IAAI,CAAC,CAAC,CACNC,GAAG,CAACC,CAAC,IAAI,IAAIH,KAAK,CAACN,KAAK,CAAC,CACzBO,IAAI,CAAC,CAAC,CACNC,GAAG,CAACE,CAAC,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGX,mBAAmB,CAC7C,CAAC;EAEL;EACAY,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;EACrDD,OAAO,CAACC,GAAG,CAACT,WAAW,CAAC,CAAC,CAAC;EAC1BQ,OAAO,CAACC,GAAG,CAACX,KAAK,CAAC;EAElB,SAASY,MAAMA,CAAA,EAAG;IAChB;EAAA;EAGF,SAASC,eAAeA,CAACC,KAAK,EAAE;IAC9Bb,QAAQ,CAACc,QAAQ,IAAI;MACnB,MAAM,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAGH,KAAK,CAACI,KAAK,CAAC,GAAG,CAAC,CAACb,GAAG,CAACc,MAAM,CAAC;MAE3C,MAAMC,QAAQ,GAAGA,CAACJ,CAAC,EAAEC,CAAC,EAAEI,SAAS,KAAK;QACpC;;QAEA,IAAIJ,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGpB,KAAK,IAAImB,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGpB,KAAK,EAAE;UAC9CyB,SAAS,CAACL,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG,CAACI,SAAS,CAACL,CAAC,CAAC,CAACC,CAAC,CAAC;QACpC;MACF,CAAC;;MAED;;MAEA;;MAEA;;MAEA,oBACEvB,OAAA;QAAK4B,SAAS,EAAC,OAAO;QAAAC,QAAA,EACnBvB,KAAK,CAACK,GAAG,CAAC,CAACmB,GAAG,EAAEC,QAAQ,kBACvB/B,OAAA;UAAK4B,SAAS,EAAC,KAAK;UAAAC,QAAA,EACjBC,GAAG,CAACnB,GAAG,CAAC,CAACqB,IAAI,EAAEC,QAAQ,kBACtBjC,OAAA;YAAA6B,QAAA,GAAME,QAAQ,EAAEE,QAAQ;UAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAC/B;QAAC,GAHsBN,QAAQ;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAI3B,CACP;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAEV,CAAC,CAAC;EACJ;;EAEA;;EAEA;;EAEA;;EAEA;AACF;AAAChC,EAAA,CA7DQJ,KAAK;AAAAqC,EAAA,GAALrC,KAAK;AA+Dd,eAAeA,KAAK;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}