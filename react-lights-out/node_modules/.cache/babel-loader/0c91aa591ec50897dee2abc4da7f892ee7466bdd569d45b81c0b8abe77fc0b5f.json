{"ast":null,"code":"var _jsxFileName = \"/Users/hannahcourtney/Desktop/CODING PROJECTS/React Exercises/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows = 5,\n  ncols = 5,\n  chanceLightStartsOn = 0.5\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    return new Array(nrows).fill().map(r => new Array(ncols).fill().map(c => Math.random() < chanceLightStartsOn));\n  }\n  console.log('testing for array of arrays true/false');\n  console.log(createBoard());\n  console.log(board);\n  function hasWon() {\n    return board.every(row => row.every(cell => !cell));\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const boardCopy = oldBoard.map(row => [...row]);\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n\n      // TODO: return the copy\n      return boardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Board\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"LIGHTS OUT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n        children: [rowIndex, colIndex]\n      }, `${rowIndex} - ${colIndex}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","Array","fill","map","r","c","Math","random","console","log","hasWon","every","row","cell","flipCellsAround","coord","oldBoard","y","x","split","Number","flipCell","boardCopy","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rowIndex","colIndex","_c","$RefreshReg$"],"sources":["/Users/hannahcourtney/Desktop/CODING PROJECTS/React Exercises/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows=5, ncols=5, chanceLightStartsOn=0.5 }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    return (\n      new Array(nrows)\n      .fill()\n      .map(r => new Array(ncols)\n      .fill()\n      .map(c => Math.random() < chanceLightStartsOn)\n      )\n    )  \n  }\n  console.log('testing for array of arrays true/false')\n  console.log(createBoard())\n  console.log(board)\n\n  function hasWon() {\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const boardCopy = oldBoard.map(row => [...row]);\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, boardCopy)\n      flipCell(y-1, x, boardCopy)\n      flipCell(y+1, x, boardCopy)\n      flipCell(y, x-1, boardCopy)\n      flipCell(y, x+1, boardCopy)\n\n      // TODO: return the copy\n      return boardCopy;\n\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n  return (\n    \n    <div className=\"Board\"> \n      <h1>LIGHTS OUT</h1>\n        {board.map((row, rowIndex) =>\n          <div className=\"row\" key={rowIndex}>\n            {row.map((cell, colIndex) => (\n              <button key={`${rowIndex} - ${colIndex}`}>{rowIndex}{colIndex}</button>\n            ))}\n            </div>\n          )}\n    </div>\n  )\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}